/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.netprojectev.client.gui.main;

import java.awt.event.WindowEvent;

import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import org.apache.logging.log4j.Logger;

import de.netprojectev.client.gui.main.CreateTickerElementDialog.DialogClosedListener;
import de.netprojectev.client.gui.tablemodels.AllMediaTableModel;
import de.netprojectev.client.gui.tablemodels.CustomQueueTableModel;
import de.netprojectev.client.gui.tablemodels.TickerTableModel;
import de.netprojectev.client.model.MediaModelClient;
import de.netprojectev.client.model.TickerModelClient;
import de.netprojectev.client.networking.ClientMessageProxy;
import de.netprojectev.misc.ImageFileFilter;
import de.netprojectev.misc.LoggerBuilder;
import de.netprojectev.misc.Misc;

/**
 * 
 * @author samu
 */
public class MainClientGUIWindow extends javax.swing.JFrame {

	//TODO last worked here, created popup menus and a menu bar
	/*
	 * next is to link all actions to the menu items. 
	 * Next provide a select and the automode and the next/previous buttons and actions on the server
	 * so in general to change the current file, the sync between all clients with the timer and so on.
	 */
	
	//and example of jtable with popupmenu
/*
 *     private void jTableLiveTickerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableLiveTickerMouseClicked
    	
    	boolean isRowAlreadySelected = false;
    	if ((SwingUtilities.isRightMouseButton(evt) || evt.isPopupTrigger()) && evt.getClickCount() == 1) {
    		
    	    int dataRow = jTableLiveticker.rowAtPoint(evt.getPoint());
    	    for(int i = 0; i < jTableLiveticker.getSelectedRows().length; i++) {
    	    	if(jTableLiveticker.getSelectedRows()[i] == dataRow) {
    	    		isRowAlreadySelected = true;
    	    	}
    	    }
    	    if(!isRowAlreadySelected) {
    	    	jTableLiveticker.changeSelection(dataRow, 0, false, false);
    	    }
    	    if (dataRow >= 0) {
    	    	jPopupMenuTickerTable.show(evt.getComponent(), evt.getX(), evt.getY());
    	    }
    	  }

    }//GEN-LAST:event_jTableLiveTickerMouseClicked
 
 
	*/
	/**
	 * 
	 */
	private static final long serialVersionUID = -4247573311423083026L;
	private static final Logger log = LoggerBuilder.createLogger(MainClientGUIWindow.class);

	private final ClientMessageProxy proxy;
	private final MediaModelClient mediaModel;
	private final TickerModelClient tickerModel;

	/**
	 * Creates new form MainClientGUIWindow
	 */
	public MainClientGUIWindow(MediaModelClient mediaModel, TickerModelClient tickerModel, ClientMessageProxy proxy) {
		this.mediaModel = mediaModel;
		this.tickerModel = tickerModel;
		this.proxy = proxy;
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpmAllTables = new javax.swing.JPopupMenu();
        jmipopAddFile = new javax.swing.JMenuItem();
        jmipopAddThemeslide = new javax.swing.JMenuItem();
        jmipopQueue = new javax.swing.JMenuItem();
        jmipopRemove = new javax.swing.JMenuItem();
        jpmQueueTable = new javax.swing.JPopupMenu();
        jmipopDequeue = new javax.swing.JMenuItem();
        jpmTickerTable = new javax.swing.JPopupMenu();
        jmipopAddElement = new javax.swing.JMenuItem();
        jmipopRemoveElement = new javax.swing.JMenuItem();
        tabbedPaneContainer = new javax.swing.JTabbedPane();
        jpAllMedia = new javax.swing.JPanel();
        jspMediaTableContainer = new javax.swing.JScrollPane();
        jtAllMedia = new javax.swing.JTable();
        jpCustomQueue = new javax.swing.JPanel();
        jspQueueTableContainer = new javax.swing.JScrollPane();
        jtCustomQueue = new javax.swing.JTable();
        jpLiveTicker = new javax.swing.JPanel();
        jspTickerTableContainer = new javax.swing.JScrollPane();
        jtLiveTicker = new javax.swing.JTable();
        jpButtonContainer = new javax.swing.JPanel();
        jbAddFile = new javax.swing.JButton();
        jbAddThemeslide = new javax.swing.JButton();
        jbAddTickerElement = new javax.swing.JButton();
        jbEdit = new javax.swing.JButton();
        jbRemoveFromList = new javax.swing.JButton();
        jmbMain = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiAddFile = new javax.swing.JMenuItem();
        jmiAddThemeslide = new javax.swing.JMenuItem();
        jmiAddTickerElt = new javax.swing.JMenuItem();
        jmiAddCntDown = new javax.swing.JMenuItem();
        jmiRemove = new javax.swing.JMenuItem();
        jmiExit = new javax.swing.JMenuItem();
        jmPrefs = new javax.swing.JMenu();
        jmiAddPrio = new javax.swing.JMenuItem();
        jmiAddTheme = new javax.swing.JMenuItem();
        jmirbAutomode = new javax.swing.JRadioButtonMenuItem();
        jmiPrefs = new javax.swing.JMenuItem();

        jmipopAddFile.setText("Add File");
        jmipopAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmipopAddFileActionPerformed(evt);
            }
        });
        jpmAllTables.add(jmipopAddFile);

        jmipopAddThemeslide.setText("Add Themeslide");
        jmipopAddThemeslide.setToolTipText("");
        jmipopAddThemeslide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmipopAddThemeslideActionPerformed(evt);
            }
        });
        jpmAllTables.add(jmipopAddThemeslide);

        jmipopQueue.setLabel("Queue");
        jmipopQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmipopQueueActionPerformed(evt);
            }
        });
        jpmAllTables.add(jmipopQueue);

        jmipopRemove.setText("Remove");
        jmipopRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmipopRemoveActionPerformed(evt);
            }
        });
        jpmAllTables.add(jmipopRemove);

        jmipopDequeue.setLabel("Dequeue");
        jmipopDequeue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmipopDequeueActionPerformed(evt);
            }
        });
        jpmQueueTable.add(jmipopDequeue);

        jmipopAddElement.setText("Add Element");
        jmipopAddElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmipopAddElementActionPerformed(evt);
            }
        });
        jpmTickerTable.add(jmipopAddElement);

        jmipopRemoveElement.setText("Remove");
        jmipopRemoveElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmipopRemoveElementActionPerformed(evt);
            }
        });
        jpmTickerTable.add(jmipopRemoveElement);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Beamer Client");

        jtAllMedia.setModel(new AllMediaTableModel(mediaModel));
        jtAllMedia.getColumnModel().getColumn(0).setCellRenderer(new TableButtonRenderer());
        jtAllMedia.getColumnModel().getColumn(0).setCellEditor(new ButtonEditor(new JCheckBox(), new ButtonEditor.TableButtonActionListener() {
            public void buttonClicked(int row) {
                queue(row);
            }
        }));
        jtAllMedia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtAllMediaMouseClicked(evt);
            }
        });
        jspMediaTableContainer.setViewportView(jtAllMedia);

        javax.swing.GroupLayout jpAllMediaLayout = new javax.swing.GroupLayout(jpAllMedia);
        jpAllMedia.setLayout(jpAllMediaLayout);
        jpAllMediaLayout.setHorizontalGroup(
            jpAllMediaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspMediaTableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE)
        );
        jpAllMediaLayout.setVerticalGroup(
            jpAllMediaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAllMediaLayout.createSequentialGroup()
                .addComponent(jspMediaTableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPaneContainer.addTab("Media", jpAllMedia);

        jtCustomQueue.setModel(new CustomQueueTableModel(mediaModel));
        jtCustomQueue.getColumnModel().getColumn(0).setCellRenderer(new TableButtonRenderer());
        jtCustomQueue.getColumnModel().getColumn(0).setCellEditor(new ButtonEditor(new JCheckBox(), new ButtonEditor.TableButtonActionListener() {
            public void buttonClicked(int row) {
                dequeue(row);
            }
        }));
        jtCustomQueue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtCustomQueueMouseClicked(evt);
            }
        });
        jspQueueTableContainer.setViewportView(jtCustomQueue);

        javax.swing.GroupLayout jpCustomQueueLayout = new javax.swing.GroupLayout(jpCustomQueue);
        jpCustomQueue.setLayout(jpCustomQueueLayout);
        jpCustomQueueLayout.setHorizontalGroup(
            jpCustomQueueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspQueueTableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE)
        );
        jpCustomQueueLayout.setVerticalGroup(
            jpCustomQueueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspQueueTableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
        );

        tabbedPaneContainer.addTab("Queue", jpCustomQueue);

        jtLiveTicker.setModel(new TickerTableModel(tickerModel));
        jtLiveTicker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtLiveTickerMouseClicked(evt);
            }
        });
        jspTickerTableContainer.setViewportView(jtLiveTicker);

        javax.swing.GroupLayout jpLiveTickerLayout = new javax.swing.GroupLayout(jpLiveTicker);
        jpLiveTicker.setLayout(jpLiveTickerLayout);
        jpLiveTickerLayout.setHorizontalGroup(
            jpLiveTickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspTickerTableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE)
        );
        jpLiveTickerLayout.setVerticalGroup(
            jpLiveTickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspTickerTableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
        );

        tabbedPaneContainer.addTab("Ticker", jpLiveTicker);

        jbAddFile.setText("Add File");
        jbAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddFileActionPerformed(evt);
            }
        });

        jbAddThemeslide.setText("Add Themeslide");
        jbAddThemeslide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddThemeslideActionPerformed(evt);
            }
        });

        jbAddTickerElement.setText("Add Tickerelement");
        jbAddTickerElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddTickerElementActionPerformed(evt);
            }
        });

        jbEdit.setText("Edit");
        jbEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditActionPerformed(evt);
            }
        });

        jbRemoveFromList.setText("Remove");
        jbRemoveFromList.setToolTipText("");
        jbRemoveFromList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveFromListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpButtonContainerLayout = new javax.swing.GroupLayout(jpButtonContainer);
        jpButtonContainer.setLayout(jpButtonContainerLayout);
        jpButtonContainerLayout.setHorizontalGroup(
            jpButtonContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpButtonContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbAddFile)
                .addGap(18, 18, 18)
                .addComponent(jbAddThemeslide)
                .addGap(18, 18, 18)
                .addComponent(jbAddTickerElement)
                .addGap(18, 18, 18)
                .addComponent(jbEdit)
                .addGap(18, 18, 18)
                .addComponent(jbRemoveFromList)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpButtonContainerLayout.setVerticalGroup(
            jpButtonContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpButtonContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpButtonContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAddFile)
                    .addComponent(jbAddThemeslide)
                    .addComponent(jbAddTickerElement)
                    .addComponent(jbRemoveFromList)
                    .addComponent(jbEdit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jmFile.setText("File");

        jmiAddFile.setText("Add File");
        jmiAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddFileActionPerformed(evt);
            }
        });
        jmFile.add(jmiAddFile);

        jmiAddThemeslide.setText("Add Themeslide");
        jmiAddThemeslide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddThemeslideActionPerformed(evt);
            }
        });
        jmFile.add(jmiAddThemeslide);

        jmiAddTickerElt.setText("Add Tickerelement");
        jmiAddTickerElt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddTickerEltActionPerformed(evt);
            }
        });
        jmFile.add(jmiAddTickerElt);

        jmiAddCntDown.setText("Add Countdown");
        jmiAddCntDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddCntDownActionPerformed(evt);
            }
        });
        jmFile.add(jmiAddCntDown);

        jmiRemove.setText("Remove");
        jmiRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiRemoveActionPerformed(evt);
            }
        });
        jmFile.add(jmiRemove);

        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jmFile.add(jmiExit);

        jmbMain.add(jmFile);

        jmPrefs.setText("Preferences");

        jmiAddPrio.setText("Add Priority");
        jmiAddPrio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddPrioActionPerformed(evt);
            }
        });
        jmPrefs.add(jmiAddPrio);

        jmiAddTheme.setText("Add Theme");
        jmiAddTheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddThemeActionPerformed(evt);
            }
        });
        jmPrefs.add(jmiAddTheme);

        jmirbAutomode.setSelected(true);
        jmirbAutomode.setText("Automode");
        jmirbAutomode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmirbAutomodeActionPerformed(evt);
            }
        });
        jmPrefs.add(jmirbAutomode);

        jmiPrefs.setText("Preferences");
        jmiPrefs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPrefsActionPerformed(evt);
            }
        });
        jmPrefs.add(jmiPrefs);

        jmbMain.add(jmPrefs);

        setJMenuBar(jmbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneContainer)
            .addComponent(jpButtonContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jpButtonContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabbedPaneContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddFileActionPerformed
        addFile();
    }//GEN-LAST:event_jmiAddFileActionPerformed

    private void jmiAddPrioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddPrioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiAddPrioActionPerformed

    private void jmipopAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmipopAddFileActionPerformed
    	addFile();
    }//GEN-LAST:event_jmipopAddFileActionPerformed

    private void jmipopAddThemeslideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmipopAddThemeslideActionPerformed
        addThemeslide();
    }//GEN-LAST:event_jmipopAddThemeslideActionPerformed

    private void jmipopRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmipopRemoveActionPerformed
        remove();
    }//GEN-LAST:event_jmipopRemoveActionPerformed

    private void jmiAddThemeslideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddThemeslideActionPerformed
    	addThemeslide();
    }//GEN-LAST:event_jmiAddThemeslideActionPerformed

    private void jmiAddTickerEltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddTickerEltActionPerformed
        addTickerElement();
    }//GEN-LAST:event_jmiAddTickerEltActionPerformed

    private void jmiAddCntDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddCntDownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiAddCntDownActionPerformed

    private void jmiRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiRemoveActionPerformed
        remove();
    }//GEN-LAST:event_jmiRemoveActionPerformed

    private void jmiAddThemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddThemeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiAddThemeActionPerformed

    private void jmiPrefsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPrefsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiPrefsActionPerformed

    private void jmirbAutomodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmirbAutomodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmirbAutomodeActionPerformed

    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed
        quit();
    }//GEN-LAST:event_jmiExitActionPerformed

	private void quit() {
		Misc.quit(this, proxy);
	}

    private void jtAllMediaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAllMediaMouseClicked
    	
    	boolean isRowAlreadySelected = false;
    	if ((SwingUtilities.isRightMouseButton(evt) || evt.isPopupTrigger()) && evt.getClickCount() == 1) {
    		
    	    int dataRow = jtAllMedia.rowAtPoint(evt.getPoint());
    	    for(int i = 0; i < jtAllMedia.getSelectedRows().length; i++) {
    	    	if(jtAllMedia.getSelectedRows()[i] == dataRow) {
    	    		isRowAlreadySelected = true;
    	    	}
    	    }
    	    if(!isRowAlreadySelected) {
    	    	jtAllMedia.changeSelection(dataRow, 0, false, false);
    	    }
    	    if (dataRow >= 0) {
    	    	jpmAllTables.show(evt.getComponent(), evt.getX(), evt.getY());
    	    }
    	  }
    }//GEN-LAST:event_jtAllMediaMouseClicked

    private void jtCustomQueueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtCustomQueueMouseClicked
    	boolean isRowAlreadySelected = false;
    	if ((SwingUtilities.isRightMouseButton(evt) || evt.isPopupTrigger()) && evt.getClickCount() == 1) {
    		
    	    int dataRow = jtCustomQueue.rowAtPoint(evt.getPoint());
    	    for(int i = 0; i < jtCustomQueue.getSelectedRows().length; i++) {
    	    	if(jtCustomQueue.getSelectedRows()[i] == dataRow) {
    	    		isRowAlreadySelected = true;
    	    	}
    	    }
    	    if(!isRowAlreadySelected) {
    	    	jtCustomQueue.changeSelection(dataRow, 0, false, false);
    	    }
    	    if (dataRow >= 0) {
    	    	jpmQueueTable.show(evt.getComponent(), evt.getX(), evt.getY());
    	    }
    	  }
    }//GEN-LAST:event_jtCustomQueueMouseClicked

    private void jtLiveTickerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtLiveTickerMouseClicked
    	boolean isRowAlreadySelected = false;
    	if ((SwingUtilities.isRightMouseButton(evt) || evt.isPopupTrigger()) && evt.getClickCount() == 1) {
    		
    	    int dataRow = jtLiveTicker.rowAtPoint(evt.getPoint());
    	    for(int i = 0; i < jtLiveTicker.getSelectedRows().length; i++) {
    	    	if(jtLiveTicker.getSelectedRows()[i] == dataRow) {
    	    		isRowAlreadySelected = true;
    	    	}
    	    }
    	    if(!isRowAlreadySelected) {
    	    	jtLiveTicker.changeSelection(dataRow, 0, false, false);
    	    }
    	    if (dataRow >= 0) {
    	    	jpmTickerTable.show(evt.getComponent(), evt.getX(), evt.getY());
    	    }
    	  }
    }//GEN-LAST:event_jtLiveTickerMouseClicked

    private void jmipopDequeueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmipopDequeueActionPerformed
        int[] selRows = jtCustomQueue.getSelectedRows();
        for(int i = 0; i < selRows.length; i++) {
        	dequeue(selRows[i]);
        }
    	
    }//GEN-LAST:event_jmipopDequeueActionPerformed

    private void jmipopAddElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmipopAddElementActionPerformed
        addTickerElement();
    }//GEN-LAST:event_jmipopAddElementActionPerformed

    private void jmipopRemoveElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmipopRemoveElementActionPerformed
        remove();
    }//GEN-LAST:event_jmipopRemoveElementActionPerformed

    private void jmipopQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmipopQueueActionPerformed
    	int[] selRows = jtAllMedia.getSelectedRows();
        for(int i = 0; i < selRows.length; i++) {
        	queue(selRows[i]);
        }
    }//GEN-LAST:event_jmipopQueueActionPerformed

	private void jbAddFileActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbAddFileActionPerformed
		addFile();

	}// GEN-LAST:event_jbAddFileActionPerformed

	private void addFile() {
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setApproveButtonText("Add");
		fileChooser.setDialogTitle("Add Files");
		fileChooser.setMultiSelectionEnabled(true);
		fileChooser.setFileFilter(new ImageFileFilter());
		int returnVal = fileChooser.showOpenDialog(this);

		if (returnVal == JFileChooser.APPROVE_OPTION) {
			proxy.sendAddImageFiles(fileChooser.getSelectedFiles());
		}
	}

	private void jbAddThemeslideActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbAddThemeslideActionPerformed
		addThemeslide();
	}// GEN-LAST:event_jbAddThemeslideActionPerformed

	private void addThemeslide() {
		JOptionPane.showMessageDialog(this, "Themeslide Creator Placeholder");
		//TODO add the themeslidecreator
	}

	private void jbAddTickerElementActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbAddTickerElementActionPerformed
		addTickerElement();
	}// GEN-LAST:event_jbAddTickerElementActionPerformed

	private void addTickerElement() {
		new CreateTickerElementDialog(this, true, new DialogClosedListener() {
			
			@Override
			public void dialogClosed(int result, String text) {
				if(result == 1) {
					proxy.sendAddTickerElement(text);
				}
			}
		}).setVisible(true);
	}

	private void jbEditActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbEditActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_jbEditActionPerformed

	private void jbRemoveFromListActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbRemoveFromListActionPerformed
		remove();
	}// GEN-LAST:event_jbRemoveFromListActionPerformed

	private void remove() {
		int selectedTab = tabbedPaneContainer.getSelectedIndex();
		
		switch (selectedTab) {
		case 0:
			int[] selectedRowsAllMedia = jtAllMedia.getSelectedRows();
			proxy.sendRemoveSelectedMedia(selectedRowsAllMedia);
			break;
		case 1:
			int[] selectedRowsCustomQueue = jtCustomQueue.getSelectedRows();
			proxy.sendDequeueSelectedMedia(selectedRowsCustomQueue);
			break;
		case 2:
			int[] selectedRowsLiveTicker = jtLiveTicker.getSelectedRows();
			proxy.sendRemoveSelectedTickerElements(selectedRowsLiveTicker);
			break;
		default:
			log.debug("remove: no propper tab selected");
			break;

		}
	}

	/**
	 * changing programs standard behaviour if user clicks the "x" on the main frame
	 * therefore it invokes the quit method 
	 */
    @Override
    protected void processWindowEvent(WindowEvent e) {

        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            quit();  
        } else {
        	super.processWindowEvent(e);
        }
    }
	
	private void queue(int row) {
		proxy.sendQueueSelectedMedia(row);
	}
	
	protected void dequeue(int row) {
		proxy.sendDequeueSelectedMedia(row);
	}

	
	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainClientGUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainClientGUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainClientGUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainClientGUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainClientGUIWindow(null, null, null).setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAddFile;
    private javax.swing.JButton jbAddThemeslide;
    private javax.swing.JButton jbAddTickerElement;
    private javax.swing.JButton jbEdit;
    private javax.swing.JButton jbRemoveFromList;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmPrefs;
    private javax.swing.JMenuBar jmbMain;
    private javax.swing.JMenuItem jmiAddCntDown;
    private javax.swing.JMenuItem jmiAddFile;
    private javax.swing.JMenuItem jmiAddPrio;
    private javax.swing.JMenuItem jmiAddTheme;
    private javax.swing.JMenuItem jmiAddThemeslide;
    private javax.swing.JMenuItem jmiAddTickerElt;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiPrefs;
    private javax.swing.JMenuItem jmiRemove;
    private javax.swing.JMenuItem jmipopAddElement;
    private javax.swing.JMenuItem jmipopAddFile;
    private javax.swing.JMenuItem jmipopAddThemeslide;
    private javax.swing.JMenuItem jmipopDequeue;
    private javax.swing.JMenuItem jmipopQueue;
    private javax.swing.JMenuItem jmipopRemove;
    private javax.swing.JMenuItem jmipopRemoveElement;
    private javax.swing.JRadioButtonMenuItem jmirbAutomode;
    private javax.swing.JPanel jpAllMedia;
    private javax.swing.JPanel jpButtonContainer;
    private javax.swing.JPanel jpCustomQueue;
    private javax.swing.JPanel jpLiveTicker;
    private javax.swing.JPopupMenu jpmAllTables;
    private javax.swing.JPopupMenu jpmQueueTable;
    private javax.swing.JPopupMenu jpmTickerTable;
    private javax.swing.JScrollPane jspMediaTableContainer;
    private javax.swing.JScrollPane jspQueueTableContainer;
    private javax.swing.JScrollPane jspTickerTableContainer;
    private javax.swing.JTable jtAllMedia;
    private javax.swing.JTable jtCustomQueue;
    private javax.swing.JTable jtLiveTicker;
    private javax.swing.JTabbedPane tabbedPaneContainer;
    // End of variables declaration//GEN-END:variables
}
