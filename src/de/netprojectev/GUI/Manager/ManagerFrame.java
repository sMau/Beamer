/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.netprojectev.GUI.Manager;

import java.awt.FileDialog;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import de.netprojectev.GUI.Dialogs.AddTickerElement;
import de.netprojectev.GUI.Dialogs.EditMediaFileFrame;
import de.netprojectev.GUI.Preferences.PreferencesFrame;
import de.netprojectev.GUI.Themeslide.ThemeslideCreatorFrame;
import de.netprojectev.LiveTicker.LiveTicker;
import de.netprojectev.LiveTicker.TickerTextElement;
import de.netprojectev.Media.ImageFile;
import de.netprojectev.Media.MediaFile;
import de.netprojectev.Media.Priority;
import de.netprojectev.Media.Status;
import de.netprojectev.Media.Theme;
import de.netprojectev.Media.Themeslide;
import de.netprojectev.MediaHandler.DisplayDispatcher;
import de.netprojectev.MediaHandler.MediaHandler;
import de.netprojectev.Misc.Constants;
import de.netprojectev.Misc.Misc;
import de.netprojectev.Preferences.PreferencesHandler;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.util.LinkedList;

import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.TableColumn;

/**
 * A GUI class which is the first object to be intialized on program start.
 * Managing the main part of the GUI the controlling unit frame.
 * @author samu
 *
 */
public class ManagerFrame extends javax.swing.JFrame {

	private static final long serialVersionUID = 7019176172214701606L;
	private MediaHandler mediaHandler;
	private LiveTicker liveTicker;
	private PreferencesHandler preferencesHandler;
	private JComboBox<String> comboBox;
	
    public ManagerFrame() {
        mediaHandler = MediaHandler.getInstance();
        mediaHandler.setManagerFrame(this);
        
        liveTicker = LiveTicker.getInstance();
        liveTicker.setManagerFrame(this);
        
        preferencesHandler = PreferencesHandler.getInstance();
        
        initComponents();
        setLocation(Misc.currentMousePosition());

        loadFromDisk();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuFileTableElement = new javax.swing.JPopupMenu();
        jMenuItemShowP = new javax.swing.JMenuItem();
        jMenuItemEditP = new javax.swing.JMenuItem();
        jMenuItemResetPlayedState = new javax.swing.JMenuItem();
        jMenuItemDeleteP = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItemAddP = new javax.swing.JMenuItem();
        jMenuItemResetAllPlayedStates = new javax.swing.JMenuItem();
        jPopupMenuTickerTable = new javax.swing.JPopupMenu();
        jMenuItemAddTickerEltP = new javax.swing.JMenuItem();
        jMenuItemEditTickerEltP = new javax.swing.JMenuItem();
        jMenuItemRemoveTickerEltP = new javax.swing.JMenuItem();
        jTabbedPane = new javax.swing.JTabbedPane();
        filemangerPanel = new javax.swing.JPanel();
        btnPanelFile = new javax.swing.JPanel();
        btnAddFile = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        btnDown = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnUp = new javax.swing.JButton();
        btnSet = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        toggleBtnShuffle = new javax.swing.JToggleButton();
        toogleBtnAuto = new javax.swing.JToggleButton();
        lblTimeleft = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFileManager = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabelPreview = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaFileInfo = new javax.swing.JTextArea();
        livetickerPanel = new javax.swing.JPanel();
        btnPanelLiveticker = new javax.swing.JPanel();
        btnAddTickerElt = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        btnEditTickerElt = new javax.swing.JButton();
        btnRemoveTickerElt = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator8 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableLiveticker = new javax.swing.JTable();
        jMenuBarMainFrame = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemAddFile = new javax.swing.JMenuItem();
        jMenuItemAddThemeslide = new javax.swing.JMenuItem();
        jMenuItemAddTickerElt = new javax.swing.JMenuItem();
        jMenuItemAddCntDwn = new javax.swing.JMenuItem();
        jMenuItemQuit = new javax.swing.JMenuItem();
        jMenuPrefs = new javax.swing.JMenu();
        jRadioButtonMenuItemAuto = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItemShuffle = new javax.swing.JRadioButtonMenuItem();
        jMenuItemPrefs = new javax.swing.JMenuItem();

        jPopupMenuFileTableElement.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jMenuItemShowP.setText("Show");
        jMenuItemShowP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemShowPActionPerformed(evt);
            }
        });
        jPopupMenuFileTableElement.add(jMenuItemShowP);

        jMenuItemEditP.setText("Edit");
        jMenuItemEditP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditPActionPerformed(evt);
            }
        });
        jPopupMenuFileTableElement.add(jMenuItemEditP);

        jMenuItemResetPlayedState.setText("Reset played state");
        jMenuItemResetPlayedState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemResetPlayedStateActionPerformed(evt);
            }
        });
        jPopupMenuFileTableElement.add(jMenuItemResetPlayedState);

        jMenuItemDeleteP.setText("Delete");
        jMenuItemDeleteP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeletePActionPerformed(evt);
            }
        });
        jPopupMenuFileTableElement.add(jMenuItemDeleteP);

        jSeparator4.setOpaque(true);
        jPopupMenuFileTableElement.add(jSeparator4);

        jMenuItemAddP.setText("Add");
        jMenuItemAddP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddPActionPerformed(evt);
            }
        });
        jPopupMenuFileTableElement.add(jMenuItemAddP);

        jMenuItemResetAllPlayedStates.setText("Reset all played states");
        jMenuItemResetAllPlayedStates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemResetAllPlayedStatesActionPerformed(evt);
            }
        });
        jPopupMenuFileTableElement.add(jMenuItemResetAllPlayedStates);

        jMenuItemAddTickerEltP.setText("Add");
        jMenuItemAddTickerEltP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddTickerEltPActionPerformed(evt);
            }
        });
        jPopupMenuTickerTable.add(jMenuItemAddTickerEltP);

        jMenuItemEditTickerEltP.setText("Edit");
        jMenuItemEditTickerEltP.setToolTipText("");
        jMenuItemEditTickerEltP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditTickerEltPActionPerformed(evt);
            }
        });
        jPopupMenuTickerTable.add(jMenuItemEditTickerEltP);

        jMenuItemRemoveTickerEltP.setText("Remove");
        jMenuItemRemoveTickerEltP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveTickerEltPActionPerformed(evt);
            }
        });
        jPopupMenuTickerTable.add(jMenuItemRemoveTickerEltP);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Beamermanager");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/de/netprojectev/GFX/icon.png")));
        setName("managerframe");

        filemangerPanel.setName("filemanagerTab");
        filemangerPanel.setNextFocusableComponent(livetickerPanel);

        btnAddFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/plus_2.png"))); // NOI18N
        btnAddFile.setToolTipText("Add a file from disc or create a new Themeslide.");
        btnAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFileActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/arrow_down.png"))); // NOI18N
        btnDown.setToolTipText("Move selected files down in list.");
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/pencil_edit.png"))); // NOI18N
        btnEdit.setToolTipText("Edit the selected file.");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/delete_2.png"))); // NOI18N
        btnRemove.setToolTipText("Delete the selected file.");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/arrow_up.png"))); // NOI18N
        btnUp.setToolTipText("Move selected files up in list.");
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/play.png"))); // NOI18N
        btnSet.setToolTipText("Show selected.");
        btnSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetActionPerformed(evt);
            }
        });

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/previous.png"))); // NOI18N
        btnPrev.setToolTipText("Show previous.");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/next.png"))); // NOI18N
        btnNext.setToolTipText("Show next.");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        toggleBtnShuffle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/shuffle-icon.png"))); // NOI18N
        toggleBtnShuffle.setToolTipText("Toggle shuffle.");
        toggleBtnShuffle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBtnShuffleActionPerformed(evt);
            }
        });

        toogleBtnAuto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/Clockwise-arrow128.png"))); // NOI18N
        toogleBtnAuto.setToolTipText("Toggle automode.");
        toogleBtnAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toogleBtnAutoActionPerformed(evt);
            }
        });

        lblTimeleft.setText("Timeleft: --:--");
        lblTimeleft.setToolTipText("Timeleft until next event.");

        javax.swing.GroupLayout btnPanelFileLayout = new javax.swing.GroupLayout(btnPanelFile);
        btnPanelFile.setLayout(btnPanelFileLayout);
        btnPanelFileLayout.setHorizontalGroup(
            btnPanelFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnPanelFileLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDown)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPrev)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTimeleft)
                .addGap(18, 18, 18)
                .addComponent(toogleBtnAuto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toggleBtnShuffle))
        );
        btnPanelFileLayout.setVerticalGroup(
            btnPanelFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnPanelFileLayout.createSequentialGroup()
                .addGroup(btnPanelFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddFile)
                    .addGroup(btnPanelFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(toggleBtnShuffle)
                        .addComponent(toogleBtnAuto)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(btnPanelFileLayout.createSequentialGroup()
                .addGroup(btnPanelFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(btnPanelFileLayout.createSequentialGroup()
                        .addGroup(btnPanelFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSet)
                            .addComponent(btnRemove)
                            .addComponent(btnEdit)
                            .addComponent(btnDown)
                            .addComponent(btnUp)
                            .addComponent(btnPrev)
                            .addComponent(btnNext)
                            .addGroup(btnPanelFileLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblTimeleft)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jScrollPane1.setMinimumSize(new java.awt.Dimension(220, 250));
        jScrollPane1.setName("");

        jTableFileManager.setModel(new FileManagerTableModel(this));
        jTableFileManager.setShowHorizontalLines(false);
        jTableFileManager.setShowVerticalLines(false);
        jTableFileManager.getColumnModel().getColumn(0).setMaxWidth(16);
        jTableFileManager.getColumnModel().getColumn(1).setMaxWidth(20);
        jTableFileManager.getColumnModel().getColumn(0).setMinWidth(16);
        jTableFileManager.getColumnModel().getColumn(1).setMinWidth(20);
        jTableFileManager.getColumnModel().getColumn(0).setResizable(false);
        jTableFileManager.getColumnModel().getColumn(1).setResizable(false);

        TableColumn prioColumn = jTableFileManager.getColumnModel().getColumn(3);
        comboBox = new JComboBox();
        for(int i = 0; i < preferencesHandler.getListOfPriorities().size(); i++) {
            comboBox.addItem(preferencesHandler.getListOfPriorities().get(i).getName());
        }
        prioColumn.setCellEditor(new DefaultCellEditor(comboBox));

        jTableFileManager.getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent event) {
                    onSelectionChangeJtableFile();
                }
            }
        );
        jTableFileManager.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableFileManagerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableFileManager);

        jScrollPane2.setBorder(null);
        jScrollPane2.setViewportBorder(null);

        jLabelPreview.setText("no File selected");
        jLabelPreview.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabelPreview.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview"));
        jScrollPane2.setViewportView(jLabelPreview);

        jScrollPane4.setBorder(null);
        jScrollPane4.setViewportBorder(null);

        jTextAreaFileInfo.setBackground(new java.awt.Color(240, 240, 240));
        jTextAreaFileInfo.setColumns(20);
        jTextAreaFileInfo.setEditable(false);
        jTextAreaFileInfo.setRows(5);
        jTextAreaFileInfo.setText("no File selected");
        jTextAreaFileInfo.setToolTipText("");
        jTextAreaFileInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Info"));
        jScrollPane4.setViewportView(jTextAreaFileInfo);

        javax.swing.GroupLayout filemangerPanelLayout = new javax.swing.GroupLayout(filemangerPanel);
        filemangerPanel.setLayout(filemangerPanelLayout);
        filemangerPanelLayout.setHorizontalGroup(
            filemangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnPanelFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator3)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(filemangerPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE))
        );
        filemangerPanelLayout.setVerticalGroup(
            filemangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filemangerPanelLayout.createSequentialGroup()
                .addComponent(btnPanelFile, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filemangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)))
        );

        jTabbedPane.addTab("Filemanager", filemangerPanel);
        filemangerPanel.getAccessibleContext().setAccessibleName("filemanagerTab");
        filemangerPanel.getAccessibleContext().setAccessibleParent(jTabbedPane);

        livetickerPanel.setName("livetickerTab");
        livetickerPanel.setNextFocusableComponent(filemangerPanel);

        btnAddTickerElt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/plus_2.png"))); // NOI18N
        btnAddTickerElt.setToolTipText("Add ticker element.");
        btnAddTickerElt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTickerEltActionPerformed(evt);
            }
        });

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnEditTickerElt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/pencil_edit.png"))); // NOI18N
        btnEditTickerElt.setToolTipText("Edit selected ticker element.");
        btnEditTickerElt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditTickerEltActionPerformed(evt);
            }
        });

        btnRemoveTickerElt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/netprojectev/GFX/delete_2.png"))); // NOI18N
        btnRemoveTickerElt.setToolTipText("Delete selected ticker elements.");
        btnRemoveTickerElt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTickerEltActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout btnPanelLivetickerLayout = new javax.swing.GroupLayout(btnPanelLiveticker);
        btnPanelLiveticker.setLayout(btnPanelLivetickerLayout);
        btnPanelLivetickerLayout.setHorizontalGroup(
            btnPanelLivetickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnPanelLivetickerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddTickerElt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditTickerElt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemoveTickerElt)
                .addContainerGap())
            .addComponent(jSeparator7, javax.swing.GroupLayout.DEFAULT_SIZE, 978, Short.MAX_VALUE)
        );
        btnPanelLivetickerLayout.setVerticalGroup(
            btnPanelLivetickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnPanelLivetickerLayout.createSequentialGroup()
                .addGroup(btnPanelLivetickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddTickerElt)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveTickerElt)
                    .addComponent(btnEditTickerElt))
                .addGap(2, 2, 2)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTableLiveticker.setModel(new TickerManagerTableModel());
        jTableLiveticker.setShowHorizontalLines(false);
        jTableLiveticker.setShowVerticalLines(false);
        jTableLiveticker.getColumnModel().getColumn(0).setMaxWidth(48);
        jTableLiveticker.getColumnModel().getColumn(0).setMinWidth(48);
        jTableLiveticker.getColumnModel().getColumn(0).setResizable(false);
        jTableLiveticker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableLiveTickerMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableLiveticker);

        javax.swing.GroupLayout livetickerPanelLayout = new javax.swing.GroupLayout(livetickerPanel);
        livetickerPanel.setLayout(livetickerPanelLayout);
        livetickerPanelLayout.setHorizontalGroup(
            livetickerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnPanelLiveticker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator8)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 978, Short.MAX_VALUE)
        );
        livetickerPanelLayout.setVerticalGroup(
            livetickerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(livetickerPanelLayout.createSequentialGroup()
                .addComponent(btnPanelLiveticker, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Liveticker", livetickerPanel);
        livetickerPanel.getAccessibleContext().setAccessibleName("livetickerTab");

        jMenuFile.setText("File");
        jMenuFile.setMargin(new java.awt.Insets(0, 4, 0, 4));

        jMenuItemAddFile.setText("Add File");
        jMenuItemAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddFileActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemAddFile);

        jMenuItemAddThemeslide.setText("Add Themeslide");
        jMenuItemAddThemeslide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddThemeslideActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemAddThemeslide);

        jMenuItemAddTickerElt.setText("Add Ticker Element");
        jMenuFile.add(jMenuItemAddTickerElt);

        jMenuItemAddCntDwn.setText("Add Countdown");
        jMenuFile.add(jMenuItemAddCntDwn);

        jMenuItemQuit.setText("Quit");
        jMenuItemQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQuitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemQuit);

        jMenuBarMainFrame.add(jMenuFile);

        jMenuPrefs.setText("Preferences");
        jMenuPrefs.setMargin(new java.awt.Insets(0, 4, 0, 4));

        jRadioButtonMenuItemAuto.setText("Automode");
        jRadioButtonMenuItemAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemAutoActionPerformed(evt);
            }
        });
        jMenuPrefs.add(jRadioButtonMenuItemAuto);

        jRadioButtonMenuItemShuffle.setText("Shuffle");
        jRadioButtonMenuItemShuffle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemShuffleActionPerformed(evt);
            }
        });
        jMenuPrefs.add(jRadioButtonMenuItemShuffle);

        jMenuItemPrefs.setText("Preferences");
        jMenuItemPrefs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrefsActionPerformed(evt);
            }
        });
        jMenuPrefs.add(jMenuItemPrefs);

        jMenuBarMainFrame.add(jMenuPrefs);

        setJMenuBar(jMenuBarMainFrame);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFileActionPerformed
        addFileGeneral();
    }//GEN-LAST:event_btnAddFileActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        removeFiles(); 
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
    	moveFilesUp();
    }//GEN-LAST:event_btnUpActionPerformed

    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
    	moveFilesDown();
    }//GEN-LAST:event_btnDownActionPerformed

    private void btnSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetActionPerformed
    	showFile();
    }//GEN-LAST:event_btnSetActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
    	showPrevious();
    }//GEN-LAST:event_btnPrevActionPerformed
    
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
    	showNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
    	editFile();
    }//GEN-LAST:event_btnEditActionPerformed

    private void jMenuItemQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQuitActionPerformed
        quit();
    }//GEN-LAST:event_jMenuItemQuitActionPerformed

    private void jMenuItemAddPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddPActionPerformed
        addFileGeneral();
    }//GEN-LAST:event_jMenuItemAddPActionPerformed

    private void jMenuItemEditPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditPActionPerformed
    	editFile();
    }//GEN-LAST:event_jMenuItemEditPActionPerformed

    private void jMenuItemDeletePActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeletePActionPerformed
    	removeFiles();
    }//GEN-LAST:event_jMenuItemDeletePActionPerformed

    private void jMenuItemShowPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemShowPActionPerformed
    	showFile();
    }//GEN-LAST:event_jMenuItemShowPActionPerformed

    private void btnAddTickerEltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTickerEltActionPerformed
        addTickerElement();
    }//GEN-LAST:event_btnAddTickerEltActionPerformed
	
    private void btnEditTickerEltActionPerformed(java.awt.event.ActionEvent evt) {                                                    
    	editTicketElement();
    }                                                

    private void btnRemoveTickerEltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTickerEltActionPerformed
        removeTickerElements();       
    }//GEN-LAST:event_btnRemoveTickerEltActionPerformed

    /**
     * opening a file dialog
     * @param evt
     */
    private void jMenuItemAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddFileActionPerformed
    	FileDialog fd;
    	fd = new FileDialog(this, "Load files", FileDialog.LOAD);
		fd.setMultipleMode(true);
		fd.setDirectory(System.getProperty("user.home"));
		fd.setLocation(Misc.currentMousePosition());
		fd.setVisible(true);
		MediaHandler.getInstance().add(Misc.createMediaFromFiles(fd.getFiles()));
    }//GEN-LAST:event_jMenuItemAddFileActionPerformed

    /**
     * opening the themeslide creator
     * @param evt
     */
    private void jMenuItemAddThemeslideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddThemeslideActionPerformed
    	new ThemeslideCreatorFrame().setVisible(true);
    }//GEN-LAST:event_jMenuItemAddThemeslideActionPerformed
    
    /**
     * opening the preferences
     * @param evt
     */
    private void jMenuItemPrefsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrefsActionPerformed
		new PreferencesFrame(this).setVisible(true);
    }//GEN-LAST:event_jMenuItemPrefsActionPerformed

    /**
     * activating the shuffling of the displayhandler
     * and synchs with its corresponding radiobutton
     * @param evt
     */
    private void jRadioButtonMenuItemShuffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemShuffleActionPerformed
    	if(jRadioButtonMenuItemShuffle.isSelected()) {
    		mediaHandler.getDisplayHandler().startShuffle();
    		toggleBtnShuffle.setSelected(true);
    	} else {
    		mediaHandler.getDisplayHandler().stopShuffle();
    		toggleBtnShuffle.setSelected(false);
    	}
    }//GEN-LAST:event_jRadioButtonMenuItemShuffleActionPerformed

    /**
     * activating the auto mode of the displayhandler
     * and synchs with its corresponding radiobutton
     * @param evt
     */
    private void jRadioButtonMenuItemAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemAutoActionPerformed
    	if(jRadioButtonMenuItemAuto.isSelected()) {
    		mediaHandler.getDisplayHandler().startAutomodus();
    		toogleBtnAuto.setSelected(true);
    	} else {
    		mediaHandler.getDisplayHandler().startAutomodus();
    		toogleBtnAuto.setSelected(false);
    	}

    }//GEN-LAST:event_jRadioButtonMenuItemAutoActionPerformed

    /**
     * activating the auto mode of the displayhandler
     * and synchs with its corresponding radio menu item
     * @param evt
     */
    private void toogleBtnAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toogleBtnAutoActionPerformed
    	if(toogleBtnAuto.isSelected()) {
    		mediaHandler.getDisplayHandler().startAutomodus();   		
    		jRadioButtonMenuItemAuto.setSelected(true);
    	} else {
    		mediaHandler.getDisplayHandler().stopAutomodus();
    		lblTimeleft.setText("Timeleft: --:--");
    		jRadioButtonMenuItemAuto.setSelected(false);
    	}
    	
    }//GEN-LAST:event_toogleBtnAutoActionPerformed

    /**
     * activating the shuffling of the displayhandler
     * and synchs with its corresponding radio menu item
     * @param evt
     */
    private void toggleBtnShuffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBtnShuffleActionPerformed
    	if(toggleBtnShuffle.isSelected()) {
    		mediaHandler.getDisplayHandler().startShuffle();
    		jRadioButtonMenuItemShuffle.setSelected(true);
    	} else {
    		mediaHandler.getDisplayHandler().stopShuffle();
    		jRadioButtonMenuItemShuffle.setSelected(false);
    	}

    }//GEN-LAST:event_toggleBtnShuffleActionPerformed

    /**
     * handling for rightclicking on the jtable files.
     * first changes the selection to the rightclicked element
     * if a row is selected a popup menu is generated
     * @param evt
     */
    private void jTableFileManagerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFileManagerMouseClicked
    	boolean isRowAlreadySelected = false;
    	if ((SwingUtilities.isRightMouseButton(evt) || evt.isPopupTrigger()) && evt.getClickCount() == 1) {
    		
    	    int dataRow = jTableFileManager.rowAtPoint(evt.getPoint());
    	    for(int i = 0; i < jTableFileManager.getSelectedRows().length; i++) {
    	    	if(jTableFileManager.getSelectedRows()[i] == dataRow) {
    	    		isRowAlreadySelected = true;
    	    	}
    	    }
    	    if(!isRowAlreadySelected) {
    	    	jTableFileManager.changeSelection(dataRow, 0, false, false);
    	    }
    	    if (dataRow >= 0) {
    	    	jPopupMenuFileTableElement.show(evt.getComponent(), evt.getX(), evt.getY());
    	    }
    	  }
    }//GEN-LAST:event_jTableFileManagerMouseClicked

    private void jMenuItemAddTickerEltPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddTickerEltPActionPerformed
    	addTickerElement();
    }//GEN-LAST:event_jMenuItemAddTickerEltPActionPerformed

    private void jMenuItemEditTickerEltPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditTickerEltPActionPerformed
    	editTicketElement();
    }//GEN-LAST:event_jMenuItemEditTickerEltPActionPerformed

    private void jMenuItemRemoveTickerEltPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRemoveTickerEltPActionPerformed
    	removeTickerElements();
    }//GEN-LAST:event_jMenuItemRemoveTickerEltPActionPerformed

    private void jTableLiveTickerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableLiveTickerMouseClicked
    	
    	boolean isRowAlreadySelected = false;
    	if ((SwingUtilities.isRightMouseButton(evt) || evt.isPopupTrigger()) && evt.getClickCount() == 1) {
    		
    	    int dataRow = jTableLiveticker.rowAtPoint(evt.getPoint());
    	    for(int i = 0; i < jTableLiveticker.getSelectedRows().length; i++) {
    	    	if(jTableLiveticker.getSelectedRows()[i] == dataRow) {
    	    		isRowAlreadySelected = true;
    	    	}
    	    }
    	    if(!isRowAlreadySelected) {
    	    	jTableLiveticker.changeSelection(dataRow, 0, false, false);
    	    }
    	    if (dataRow >= 0) {
    	    	jPopupMenuTickerTable.show(evt.getComponent(), evt.getX(), evt.getY());
    	    }
    	  }

    }//GEN-LAST:event_jTableLiveTickerMouseClicked

    private void jMenuItemResetPlayedStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemResetPlayedStateActionPerformed
    	int[] selectedRows = jTableFileManager.getSelectedRows();
    	if(selectedRows.length > 0) {
    		for(int i = 0; i < selectedRows.length; i++) {
    			mediaHandler.getMediaFiles().get(selectedRows[i]).resetPlayedState();
    		}
    		((FileManagerTableModel) jTableFileManager.getModel()).updateModel();
    	}
    }//GEN-LAST:event_jMenuItemResetPlayedStateActionPerformed

    private void jMenuItemResetAllPlayedStatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemResetAllPlayedStatesActionPerformed
    	for(int i = 0; i < mediaHandler.getMediaFiles().size(); i++) {
    		mediaHandler.getMediaFiles().get(i).resetPlayedState();
    	}
    	((FileManagerTableModel) jTableFileManager.getModel()).updateModel();
    }//GEN-LAST:event_jMenuItemResetAllPlayedStatesActionPerformed
    
    /**
     * opens a dialog to choose between adding a file from disk or a themeslide
     */
	private void addFileGeneral() {
		
		FileDialog fd;
		
        Object[] options = {"File", "Themeslide", "Cancel"};
		int n = JOptionPane.showOptionDialog(this,"Choose to add a file or a themeslide.", "Add File / Themeslide", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
					null,
					options,
					options[0]);
		if(n == JOptionPane.YES_OPTION) {
			fd = new FileDialog(this, "Load files", FileDialog.LOAD);
			fd.setMultipleMode(true);
			fd.setDirectory(System.getProperty("user.home"));
			fd.setLocation(Misc.currentMousePosition());
			fd.setVisible(true);
			MediaHandler.getInstance().add(Misc.createMediaFromFiles(fd.getFiles()));
		} else if(n == JOptionPane.NO_OPTION) {
			new ThemeslideCreatorFrame().setVisible(true);
		}
	}

	/**
	 * handling the programs termination
	 * showing up a confirmation dialog and invokes the serialization
	 */
	private void quit() {
        int exit = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Quit", JOptionPane.YES_NO_OPTION);
        if (exit == JOptionPane.YES_OPTION) {	
        	saveToDisk();
    		System.exit(0);
        }

	}
	
    /**
     * opens the add ticker element dialog
     */
    private void addTickerElement() {
		new AddTickerElement(null, this).setVisible(true);
	}

    /**
     * opens the add ticker element dialog with the selected element in the jtable
     */
    private void editTicketElement() {
		if(jTableLiveticker.getSelectedRow() >= 0) {
    		new AddTickerElement(liveTicker.getTextElements().get(jTableLiveticker.getSelectedRow()), this).setVisible(true);
    	}
	}
    
    /**
     * invokes the showNext method of the display handler
     * and guarantees a proper reselection of the previously selected files
     */
    private void showNext() {
    	final int[] selectedRows = getjTableFileManager().getSelectedRows(); 
		mediaHandler.getDisplayHandler().showNext();
		java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
            	for(int i = 0; i < selectedRows.length; i++) {
            		getjTableFileManager().addRowSelectionInterval(selectedRows[i], selectedRows[i]);
            	}
            }
        });
	}

    /**
     * invokes the showPrevious method of the display handler
     * and guarantees a proper reselection of the previously selected files
     */
	private void showPrevious() {
    	final int[] selectedRows = getjTableFileManager().getSelectedRows(); 
		mediaHandler.getDisplayHandler().showPrevious();
		java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
            	for(int i = 0; i < selectedRows.length; i++) {
            		getjTableFileManager().addRowSelectionInterval(selectedRows[i], selectedRows[i]);
            	}
            }
        });
	}

	/**
	 * opens the edit media file dialog with the first selected file 
	 */
	private void editFile() {
		int[] selectedRows = jTableFileManager.getSelectedRows();
    	if(selectedRows.length > 0) {
    		new EditMediaFileFrame(Misc.indexListToMediaFiles(selectedRows)[0], this).setVisible(true);
    	}
	}
	
	/**
	 * invokes the show method of the display handler with the first selected file
	 * and guarantees a proper reselection of the previously selected files
	 */
	private void showFile() {
		final int[] selectedRows = getjTableFileManager().getSelectedRows();
    	if(selectedRows.length > 0) {
    		mediaHandler.getDisplayHandler().show(Misc.indexListToMediaFiles(selectedRows)[0]);
    		java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                	for(int i = 0; i < selectedRows.length; i++) {
                		getjTableFileManager().addRowSelectionInterval(selectedRows[i], selectedRows[i]);
                	}
                }
            });
    	}
	}

	/**
	 * invokes the remove method of the live ticker with the selected elements
	 */
	private void removeTickerElements() {
		int[] selectedRows = jTableLiveticker.getSelectedRows();
		int newSelection = -1;
        if(selectedRows.length > 0) {
        	liveTicker.remove(Misc.indexListToTickerElts(selectedRows));
        	int firstSelectedRow = selectedRows[0];
    		if(firstSelectedRow >= jTableLiveticker.getRowCount() - 1) {
    			if(jTableLiveticker.getRowCount() == 0) {
    				newSelection = -1;
    			} else {
    				newSelection = jTableLiveticker.getRowCount() - 1;
    			}
    		} else {
    			newSelection = firstSelectedRow;
    		}
    		
    		final int finalNewSelection = newSelection;
    		java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                	if(finalNewSelection >=0) {
                		jTableLiveticker.setRowSelectionInterval(finalNewSelection, finalNewSelection);
                	}
                }
            });

        }

	}

	/**
	 * invokes the up method of media handler with the selected files
	 */
    private void moveFilesUp() {
		final int[] selectedRows = jTableFileManager.getSelectedRows();	
    	if(selectedRows.length > 0) {
    		mediaHandler.up(Misc.indexListToMediaFiles(selectedRows));
    		
    		java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                	if(selectedRows[0] == 0) {
                    	getjTableFileManager().addRowSelectionInterval(selectedRows[0], (selectedRows[0])  + (selectedRows.length - 1));          	
                	} else {
                    	getjTableFileManager().addRowSelectionInterval(selectedRows[0] - 1, (selectedRows[0] - 1)  + (selectedRows.length - 1)); 	
                	} 	
                }
            });
    	}
	}
	
    /**
     * invokes the remove method of media handler with the selected files
     * and handles a proper reselection (always a single file) after removing the selected files
     */
	private void removeFiles() {
		final int[] selectedRows = jTableFileManager.getSelectedRows();
		int newSelection = -1;
        if(selectedRows.length > 0) {
        	mediaHandler.remove(Misc.indexListToMediaFiles(selectedRows));
    		int firstSelectedRow = selectedRows[0];
    		if(firstSelectedRow >= jTableFileManager.getRowCount() - 1) {
    			if(jTableFileManager.getRowCount() == 0) {
    				newSelection = -1;
    			} else {
    				newSelection = jTableFileManager.getRowCount() - 1;
    			}
    		} else {
    			newSelection = firstSelectedRow;
    		}
    		
    		final int finalNewSelection = newSelection;
    		java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                	if(finalNewSelection >=0) {
                		getjTableFileManager().setRowSelectionInterval(finalNewSelection, finalNewSelection);
                	}
                }
            });
        }
	}

	/**
	 * invokes the down method of media handler with the selected files
	 */
	private void moveFilesDown() {
		final int[] selectedRows = jTableFileManager.getSelectedRows();
    	if(selectedRows.length > 0) {
    		mediaHandler.down(Misc.indexListToMediaFiles(selectedRows));
    		
    		java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                	if(selectedRows[selectedRows.length - 1] == getjTableFileManager().getRowCount() - 1) {
                    	getjTableFileManager().addRowSelectionInterval((getjTableFileManager().getRowCount() - 1) - (selectedRows.length - 1), (getjTableFileManager().getRowCount() - 1));          	
                	} else {
                    	getjTableFileManager().addRowSelectionInterval((selectedRows[selectedRows.length - 1] + 1) - (selectedRows.length - 1), selectedRows[selectedRows.length - 1] + 1); 	
                	} 	
                }
            });
    	}
	}
    
    /**
     * making the priority column of the file jtable editable with a jcombobox
     * it receives the priorities from the preference handlers list.
     */
	public void refreshComboBoxCellEditor() {
		TableColumn prioColumn = jTableFileManager.getColumnModel().getColumn(3);
        comboBox = new JComboBox();
        for(int i = 0; i < preferencesHandler.getListOfPriorities().size(); i++) {
            comboBox.addItem(preferencesHandler.getListOfPriorities().get(i).getName());
        }
        prioColumn.setCellEditor(new DefaultCellEditor(comboBox));
	}
    
	/**
	 * refreshes the jlable which shows the time left until next event
	 * @param timeleft time in seconds left until next event
	 */
    public void refreshTimeleftLbl(int timeleft) {
    	
    	lblTimeleft.setText("Timeleft: " + Misc.convertFromSecondsToTimeString(timeleft));
    }
    
    /**
     * handles the file loading and to update the current instance of the program to its states.
     * @return true if successful else false
     */
    @SuppressWarnings("unchecked")
	private Boolean loadFromDisk() {
    	LinkedList<MediaFile> tmpMedia = (LinkedList<MediaFile>) Misc.loadFromFile(Constants.FILENAME_MEDIAFILES);
    	LinkedList<Priority> tmpPriority = (LinkedList<Priority>) Misc.loadFromFile(Constants.FILENAME_PRIORITIES);
    	LinkedList<Theme> tmpTheme = (LinkedList<Theme>) Misc.loadFromFile(Constants.FILENAME_THEMES);
    	LinkedList<TickerTextElement> tmpTickerElements = (LinkedList<TickerTextElement>) Misc.loadFromFile(Constants.FILENAME_LIVETICKER);
    	Integer tmpPreviewWidth = (Integer) Misc.loadFromFile(Constants.FILENAME_SETTINGS);
    	
    	if(tmpMedia != null) {
    		
    		for(int i = 0; i < tmpMedia.size(); i++) {
    			tmpMedia.get(i).setStatus(new Status());
    			tmpMedia.get(i).setDisplay(DisplayDispatcher.getInstance().getDisplayFrame());
    			if(tmpMedia.get(i) instanceof ImageFile) {
    				((ImageFile) tmpMedia.get(i)).generatePreview();
    			}
    			
    			mediaHandler.add(tmpMedia.toArray(new MediaFile[0]));
    		}
    		
    	}
    	
    	//i = 1, to prevent adding multiple default priorities
    	if(tmpPriority != null) {
    		for(int i = 1; i < tmpPriority.size(); i++) {
    			preferencesHandler.addPriority(tmpPriority.get(i));
    		}
    	}
    	
    	if(tmpTheme != null) {
    		for(int i = 0; i < tmpTheme.size(); i++) {
    			preferencesHandler.addTheme(tmpTheme.get(i));
    		}
    	}
    	
    	if(tmpTickerElements != null) {
    		for(int i = 0; i < tmpTickerElements.size(); i++) {
    			liveTicker.add(tmpTickerElements.get(i));
    		}
    	}
    	
    	if(tmpPreviewWidth != null) {
    		preferencesHandler.setPreviewWidth(tmpPreviewWidth);
    	}

    	return true;
	
    }
    
    /**
     * handles the serialization of the current instance of the program
     * @return true if successful else false 
     */
    private Boolean saveToDisk() {
    	Misc.saveToFile(mediaHandler.getMediaFiles(), Constants.FILENAME_MEDIAFILES);
    	Misc.saveToFile(preferencesHandler.getListOfPriorities(), Constants.FILENAME_PRIORITIES);
    	Misc.saveToFile(preferencesHandler.getListOfThemes(), Constants.FILENAME_THEMES);
    	Misc.saveToFile(liveTicker.getTextElements(), Constants.FILENAME_LIVETICKER);
    	
    	Misc.saveToFile(preferencesHandler.getPreviewWidth(), Constants.FILENAME_SETTINGS);
    	
    	return true;
    }
    
    /**
     * handles the behavior when the selection in the file jtable changes.
     * it updates the info area and the previewing
     */
	protected void onSelectionChangeJtableFile() {
		int viewRow = jTableFileManager.getSelectedRow();
		if (viewRow < 0) {
		    jTextAreaFileInfo.setText("No file selected");
		    jLabelPreview.setIcon(null);
		    jLabelPreview.setText("No file selected");
		} else {
		    jTextAreaFileInfo.setText(mediaHandler.getMediaFiles().get(viewRow).generateInfoString());
		    jLabelPreview.setText("");
		    if(mediaHandler.getMediaFiles().get(viewRow) instanceof ImageFile) {
		    	jLabelPreview.setIcon(((ImageFile) mediaHandler.getMediaFiles().get(viewRow)).getPreview());
		    } else if (mediaHandler.getMediaFiles().get(viewRow) instanceof Themeslide) {
		    	jLabelPreview.setText(((Themeslide) mediaHandler.getMediaFiles().get(viewRow)).getText().getText());
		    }
		    
		}
	}
    
	/**
	 * changing programs standard behaviour if user clicks the "x" on the main frame
	 * therefore it invokes the quit method 
	 */
    @Override
    protected void processWindowEvent(WindowEvent e) {

        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            quit();  
        } else {
        	super.processWindowEvent(e);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ManagerFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFile;
    private javax.swing.JButton btnAddTickerElt;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnEditTickerElt;
    private javax.swing.JButton btnNext;
    private javax.swing.JPanel btnPanelFile;
    private javax.swing.JPanel btnPanelLiveticker;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveTickerElt;
    private javax.swing.JButton btnSet;
    private javax.swing.JButton btnUp;
    private javax.swing.JPanel filemangerPanel;
    private javax.swing.JLabel jLabelPreview;
    private javax.swing.JMenuBar jMenuBarMainFrame;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemAddCntDwn;
    private javax.swing.JMenuItem jMenuItemAddFile;
    private javax.swing.JMenuItem jMenuItemAddP;
    private javax.swing.JMenuItem jMenuItemAddThemeslide;
    private javax.swing.JMenuItem jMenuItemAddTickerElt;
    private javax.swing.JMenuItem jMenuItemAddTickerEltP;
    private javax.swing.JMenuItem jMenuItemDeleteP;
    private javax.swing.JMenuItem jMenuItemEditP;
    private javax.swing.JMenuItem jMenuItemEditTickerEltP;
    private javax.swing.JMenuItem jMenuItemPrefs;
    private javax.swing.JMenuItem jMenuItemQuit;
    private javax.swing.JMenuItem jMenuItemRemoveTickerEltP;
    private javax.swing.JMenuItem jMenuItemResetAllPlayedStates;
    private javax.swing.JMenuItem jMenuItemResetPlayedState;
    private javax.swing.JMenuItem jMenuItemShowP;
    private javax.swing.JMenu jMenuPrefs;
    private javax.swing.JPopupMenu jPopupMenuFileTableElement;
    private javax.swing.JPopupMenu jPopupMenuTickerTable;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemAuto;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemShuffle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTableFileManager;
    private javax.swing.JTable jTableLiveticker;
    private javax.swing.JTextArea jTextAreaFileInfo;
    private javax.swing.JLabel lblTimeleft;
    private javax.swing.JPanel livetickerPanel;
    private javax.swing.JToggleButton toggleBtnShuffle;
    private javax.swing.JToggleButton toogleBtnAuto;
    // End of variables declaration//GEN-END:variables

	public javax.swing.JTable getjTableFileManager() {
		return jTableFileManager;
    }

	public void setjTableFileManager(javax.swing.JTable jTableFileManager) {
		this.jTableFileManager = jTableFileManager;
	}

	public javax.swing.JTable getjTableLiveticker() {
		return jTableLiveticker;
	}
	
	public void setjTableLiveticker(javax.swing.JTable jTableLiveticker) {
		this.jTableLiveticker = jTableLiveticker;
	}

}
