/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.netprojectev.GUI.Themeslide;

import java.awt.Color;
import java.awt.Insets;
import java.awt.Point;

import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import de.netprojectev.Media.MediaFile;
import de.netprojectev.Media.Priority;
import de.netprojectev.Media.Theme;
import de.netprojectev.Media.Themeslide;
import de.netprojectev.MediaHandler.MediaHandler;
import de.netprojectev.Misc.Constants;
import de.netprojectev.Misc.Misc;
import de.netprojectev.Preferences.PreferencesHandler;

/**
 * This is a GUI class to create and design a new Themeslide.
 * It contains a small text editor and the possibilty to select a Theme (background).
 * @author samu
 *
 */
public class ThemeslideCreatorFrame extends javax.swing.JFrame {

	private static final long serialVersionUID = -3653577264825548156L;
	
	private StyledDocument styledDoc;
	private Style style;
	
	private int marginLeft = 0;
	private int marginTop = 0;
	
	private Color textColorToSet = Color.BLACK;

    public ThemeslideCreatorFrame() {
    	initComponents();
    	
        for(int i = 0; i < PreferencesHandler.getInstance().getListOfThemes().size(); i++) {
        	jComboBoxTheme.addItem(PreferencesHandler.getInstance().getListOfThemes().get(i).getName());
        }
        for(int i = 0; i < PreferencesHandler.getInstance().getListOfPriorities().size(); i++) {
        	jComboBoxPriority.addItem(PreferencesHandler.getInstance().getListOfPriorities().get(i).getName());
        }
        String[] font = Constants.FONT_FAMILIES;
        for(int i = 0; i < font.length; i++) {
        	jComboBoxFontType.addItem(font[i]);
        }

        for(int i = 0; i < Constants.FONT_SIZES.length; i++) {
        	jComboBoxFontSize.addItem(Constants.FONT_SIZES[i]);
        }
        
        jComboBoxFontType.setSelectedItem(textPaneThemeslide.getFont().getFamily());
        jComboBoxFontSize.setSelectedItem(textPaneThemeslide.getFont().getSize() + "px");
        
        styledDoc = textPaneThemeslide.getStyledDocument();
        
        style=textPaneThemeslide.addStyle("bold",null);
    	StyleConstants.setBold(style,true);
    	
        setLocation(Misc.currentMousePosition());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxTheme = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldThemeSlideName = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jButtonCancel = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonAddAndShow = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxPriority = new javax.swing.JComboBox();
        jComboBoxFontSize = new javax.swing.JComboBox();
        jComboBoxFontType = new javax.swing.JComboBox();
        jToggleButtonBold = new javax.swing.JToggleButton();
        jLabelAnchor = new javax.swing.JLabel();
        jTextFieldMarginLeft = new javax.swing.JTextField();
        jTextFieldMarginTop = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textPanePanel1 = new de.netprojectev.GUI.Themeslide.TextPanePanel();
        textPaneThemeslide = new de.netprojectev.GUI.Themeslide.TextPaneThemeslide();
        jToggleButtonItalic = new javax.swing.JToggleButton();
        jToggleButtonUnderline = new javax.swing.JToggleButton();
        jButtonColorPicker = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Themeslide Creator");

        jLabel3.setText("Theme");

        jComboBoxTheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxThemeActionPerformed(evt);
            }
        });

        jLabel4.setText("Name");

        jTextFieldThemeSlideName.setColumns(16);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonAddAndShow.setText("Add and show");
        jButtonAddAndShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddAndShowActionPerformed(evt);
            }
        });

        jLabel1.setText("Priority");

        jComboBoxFontSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFontSizeActionPerformed(evt);
            }
        });

        jComboBoxFontType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFontTypeActionPerformed(evt);
            }
        });

        jToggleButtonBold.setText("<html><body><b>B</b></body></html>");
        jToggleButtonBold.setToolTipText("Toggle bold");
        jToggleButtonBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonBoldActionPerformed(evt);
            }
        });

        jLabelAnchor.setText("Margin");

        jTextFieldMarginLeft.setText("0");

        jTextFieldMarginTop.setText("0");

        jScrollPane1.setDoubleBuffered(true);

        textPaneThemeslide.setDoubleBuffered(true);

        javax.swing.GroupLayout textPanePanel1Layout = new javax.swing.GroupLayout(textPanePanel1);
        textPanePanel1.setLayout(textPanePanel1Layout);
        textPanePanel1Layout.setHorizontalGroup(
            textPanePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textPaneThemeslide, javax.swing.GroupLayout.DEFAULT_SIZE, 1039, Short.MAX_VALUE)
        );
        textPanePanel1Layout.setVerticalGroup(
            textPanePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textPaneThemeslide, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(textPanePanel1);

        jToggleButtonItalic.setText("<html><body><b><i>I</i></b></body></html>");
        jToggleButtonItalic.setToolTipText("Toggle italic");
        jToggleButtonItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonItalicActionPerformed(evt);
            }
        });

        jToggleButtonUnderline.setText("<html><body><b><u>U</u></b></body></html>");
        jToggleButtonUnderline.setToolTipText("Toggle underline");
        jToggleButtonUnderline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonUnderlineActionPerformed(evt);
            }
        });

        jButtonColorPicker.setText("Color");
        jButtonColorPicker.setToolTipText("Choose text color");
        jButtonColorPicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonColorPickerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToggleButtonBold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddAndShow)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButtonItalic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButtonUnderline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jComboBoxFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxFontType, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jButtonColorPicker)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelAnchor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMarginLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMarginTop, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldThemeSlideName, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxTheme, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTheme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldThemeSlideName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxPriority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxFontType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButtonBold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAnchor)
                    .addComponent(jTextFieldMarginLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldMarginTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButtonUnderline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButtonItalic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonColorPicker))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonAddAndShow))
                .addContainerGap())
        );

        jTextFieldMarginLeft.getDocument().addDocumentListener(new DocumentListener() {@Override
            public void insertUpdate(DocumentEvent e) {
                marginLeftModified();

            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                marginLeftModified();

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                marginLeftModified();

            }});
            jTextFieldMarginTop.getDocument().addDocumentListener(new DocumentListener() {@Override
                public void insertUpdate(DocumentEvent e) {
                    marginTopModified();

                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    marginTopModified();

                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    marginTopModified();

                }});

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );

                pack();
            }// </editor-fold>//GEN-END:initComponents

    
    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
    	dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {                                            
    	addThemeslide();
    	dispose();
    }                                          

    private void jButtonAddAndShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddAndShowActionPerformed
    	addThemeslide();
    	MediaHandler.getInstance().getDisplayHandler().show(MediaHandler.getInstance().getMediaFiles().getLast());
    	dispose();
    }//GEN-LAST:event_jButtonAddAndShowActionPerformed

    /**
     * on selection change, change the background image to the new selected themes background
     * @param evt
     */
    private void jComboBoxThemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxThemeActionPerformed
    	textPaneThemeslide.setThemeBackground(PreferencesHandler.getInstance().getListOfThemes().get(jComboBoxTheme.getSelectedIndex()).getBackgroundImage());
    }//GEN-LAST:event_jComboBoxThemeActionPerformed

    /**
     * changing the selected text to bold
     * @param evt
     */
    private void jToggleButtonBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonBoldActionPerformed
    	//TODO toggling use, to unbold alrady bolded text
    	if(textPaneThemeslide.getSelectedText() != null && !textPaneThemeslide.getSelectedText().isEmpty()) {
    		int length = textPaneThemeslide.getSelectedText().length();
        	styledDoc.setCharacterAttributes(textPaneThemeslide.getSelectionStart(), length, textPaneThemeslide.getStyle("bold"), false);
    	}
    	
    }//GEN-LAST:event_jToggleButtonBoldActionPerformed

    /**
     * on selection change, changing the selected text to the new font size
     * @param evt
     */
    private void jComboBoxFontSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFontSizeActionPerformed

    	if(textPaneThemeslide.getSelectedText() != null && !textPaneThemeslide.getSelectedText().isEmpty()) {
    		int length = textPaneThemeslide.getSelectedText().length();
        	SimpleAttributeSet sattr = new SimpleAttributeSet();
            sattr.addAttribute(StyleConstants.Size, (String) jComboBoxFontSize.getSelectedItem());
            styledDoc.setCharacterAttributes(textPaneThemeslide.getSelectionStart(), length, sattr, false);
    	}

    }//GEN-LAST:event_jComboBoxFontSizeActionPerformed

    /**
     * on selection change, changing the selected text to the new font family
     * @param evt
     */
    private void jComboBoxFontTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFontTypeActionPerformed
        
    	if(textPaneThemeslide.getSelectedText() != null && !textPaneThemeslide.getSelectedText().isEmpty()) {
	    	int length = textPaneThemeslide.getSelectedText().length();
	    	SimpleAttributeSet sas = new SimpleAttributeSet();
	        StyleConstants.setFontFamily(sas, (String) jComboBoxFontType.getSelectedItem());
	        styledDoc.setCharacterAttributes(textPaneThemeslide.getSelectionStart(), length, sas, false);
    	}

    }//GEN-LAST:event_jComboBoxFontTypeActionPerformed

    private void jToggleButtonItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonItalicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButtonItalicActionPerformed

    private void jToggleButtonUnderlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonUnderlineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButtonUnderlineActionPerformed

    private void jButtonColorPickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonColorPickerActionPerformed
    	(new ColorPickerDialog(this, true)).setVisible(true);
    	
    }//GEN-LAST:event_jButtonColorPickerActionPerformed

    /**
     * handles the adding of the new themeslide to the media handler.
     * checks all data and adds it if everything is fine, else showing an error dialog
     */
    private void addThemeslide() {
    	Priority priority = null;
    	Theme theme = null;
    	String name = null;
    	
    	try {
			marginTop = Integer.parseInt(jTextFieldMarginTop.getText());
		} catch (NumberFormatException e) {
			marginTop = 0;
			//e.printStackTrace();
		}
    	try {
			marginLeft = Integer.parseInt(jTextFieldMarginLeft.getText());
		} catch (NumberFormatException e) {
			marginLeft = 0;
			//e.printStackTrace();
		}
    	
    	
    	
    	if(!jTextFieldThemeSlideName.getText().isEmpty() && jTextFieldThemeSlideName.getText() != null) {
    		name  = jTextFieldThemeSlideName.getText();
    	} else {
    		JOptionPane.showMessageDialog(this, "Please enter a name.", "Error", JOptionPane.ERROR_MESSAGE);
    	}
    	if(jComboBoxPriority.getSelectedIndex() >= 0) {
    		priority = PreferencesHandler.getInstance().getListOfPriorities().get(jComboBoxPriority.getSelectedIndex());
    	} else {
    		JOptionPane.showMessageDialog(this, "Please select a priority.", "Error", JOptionPane.ERROR_MESSAGE);
    	}
    	if(jComboBoxTheme.getSelectedIndex() >= 0) {
    		theme = PreferencesHandler.getInstance().getListOfThemes().get(jComboBoxTheme.getSelectedIndex());
    	} else {
    		JOptionPane.showMessageDialog(this, "Please select a theme.", "Error", JOptionPane.ERROR_MESSAGE);
    	}
    	    	
    	if(name != null && priority != null && theme != null) {
    		MediaFile[] themeSlides = new MediaFile[1];
    		themeSlides[0] = new Themeslide(name, priority, theme, textPaneThemeslide, new Point(marginLeft, marginTop));
    		MediaHandler.getInstance().add(themeSlides);
    	} else {
    		JOptionPane.showMessageDialog(this, "Error while reading data.", "Error", JOptionPane.ERROR_MESSAGE);
    	}

    }
    
    /**
     * when margin left textfield changed, this method changes the left margin of the JTextPane
     */
	private void marginLeftModified() {
		//TODO show user information about entering a value bigger than 0/TODO not working if frame smaller than set anchor
		if(!jTextFieldMarginLeft.getText().isEmpty()) {
	    	try {
				if(Integer.parseInt(jTextFieldMarginLeft.getText()) > 0) {
					Insets oldMargin = textPaneThemeslide.getMargin();
					textPanePanel1.setMarginOfTextPaneThemslide(new Insets(oldMargin.top, Integer.parseInt(jTextFieldMarginLeft.getText()), oldMargin.bottom, oldMargin.right));
				}
			} catch (NumberFormatException e) {
				//e.printStackTrace();
			}
		}
	}

	/**
	 * when margin top textfield changed, this method changes the top margin of the JTextPane
	 */
	private void marginTopModified() {
		//TODO show user information about entering a value bigger than 0
		if(!jTextFieldMarginTop.getText().isEmpty()) {
			try {
				if(Integer.parseInt(jTextFieldMarginTop.getText()) > 0) {
					Insets oldMargin = textPaneThemeslide.getMargin();
					textPanePanel1.setMarginOfTextPaneThemslide(new Insets(Integer.parseInt(jTextFieldMarginTop.getText()), oldMargin.left, oldMargin.bottom, oldMargin.right));				}
			} catch (NumberFormatException e) {
				//e.printStackTrace();
			}
		}
    	
    	
	}
	
	
	
	
 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThemeslideCreatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThemeslideCreatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThemeslideCreatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThemeslideCreatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ThemeslideCreatorFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddAndShow;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonColorPicker;
    private javax.swing.JComboBox jComboBoxFontSize;
    private javax.swing.JComboBox jComboBoxFontType;
    private javax.swing.JComboBox jComboBoxPriority;
    private javax.swing.JComboBox jComboBoxTheme;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelAnchor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextFieldMarginLeft;
    private javax.swing.JTextField jTextFieldMarginTop;
    private javax.swing.JTextField jTextFieldThemeSlideName;
    private javax.swing.JToggleButton jToggleButtonBold;
    private javax.swing.JToggleButton jToggleButtonItalic;
    private javax.swing.JToggleButton jToggleButtonUnderline;
    private de.netprojectev.GUI.Themeslide.TextPanePanel textPanePanel1;
    private de.netprojectev.GUI.Themeslide.TextPaneThemeslide textPaneThemeslide;
    // End of variables declaration//GEN-END:variables


	public int getAnchorHeight() {
		return marginTop;
	}

	public void setAnchorHeight(int anchorHeight) {
		this.marginTop = anchorHeight;
		jTextFieldMarginTop.setText(Integer.toString(anchorHeight));
	}

	public int getAnchorWidth() {
		return marginLeft;
	}

	public void setAnchorWidth(int anchorWidth) {
		this.marginLeft = anchorWidth;
		jTextFieldMarginLeft.setText(Integer.toString(anchorWidth));
	}

	public Color getTextColorToSet() {
		return textColorToSet;
	}

	public void setTextColorToSet(Color textColorToSet) {
		this.textColorToSet = textColorToSet;
		//TODO perform the appropriate update method to set the color of the selected text.
	}
}
