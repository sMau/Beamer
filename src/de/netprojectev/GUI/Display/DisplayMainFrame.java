/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.netprojectev.GUI.Display;

import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JOptionPane;
import javax.swing.Timer;

import de.netprojectev.Misc.Constants;
import de.netprojectev.Preferences.PreferencesHandler;

/**
 * GUI class frame, to store the viewing components, as the live ticker and the image and themeslide showing component.
 * @author samu
 */
public class DisplayMainFrame extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 863589702184282724L;
	
	private Timer liveTickerTimer;
	private Boolean fullscreen;
	private int screenNumberDisplayFrame; 
	
    public DisplayMainFrame() {
        initComponents();
        fullscreen = false;
        screenNumberDisplayFrame = 0;
        startLiveTicker(Integer.parseInt(PreferencesHandler.getInstance().getProperties().getProperty(Constants.PROP_TICKER_SPEED)));
    }

    public void startLiveTicker(int tickerUpdateInterval) {
    	liveTickerTimer = new Timer(tickerUpdateInterval, new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				tickerComponent.repaint();
			}

		});
    	liveTickerTimer.start(); 
		
	}
    
    public void stopLiveTicker() {
    	liveTickerTimer.stop();
    }
    
    /**
     * Setting the display frame as fullscreen exclusive window
     * @param screenNumber the number of the screen to show on
     */
    public void enterFullscreen(int screenNumber) {
    	
    	if(!fullscreen) {
    		screenNumberDisplayFrame = screenNumber;
	    	GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
			GraphicsDevice[] myDevices = ge.getScreenDevices();
			dispose();
			this.setUndecorated(true);
			setVisible(true);
			// this.setAlwaysOnTop(true);
			if (screenNumber >= 0 && screenNumber < myDevices.length) {
				myDevices[screenNumber].setFullScreenWindow(this);
		    	tickerComponent.refreshStringGeneration();
		    	fullscreen = true;
			} else {
				JOptionPane.showMessageDialog(this, "Error during entering fullscreen exclusive mode. \nCheck the choosen screen.", "Error", JOptionPane.ERROR_MESSAGE);
				dispose();
				this.setUndecorated(false);
				setVisible(true);
				fullscreen = false;
			}
    	}

    }
    
    /**
     * lets the display window exiting the fullscreen
     */
    public void exitFullscreen() {
    	
    	if(fullscreen) {
	    	GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
			GraphicsDevice[] myDevices = ge.getScreenDevices();
			dispose();
			this.setUndecorated(false);
			setVisible(true);
			myDevices[screenNumberDisplayFrame].setFullScreenWindow(null);
			// this.setAlwaysOnTop(false);
			pack();
    		fullscreen = false;
	    	tickerComponent.refreshStringGeneration();
    	}
    }

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayMainComponent = new de.netprojectev.GUI.Display.DisplayMainComponent();
        tickerComponent = new de.netprojectev.GUI.Display.TickerComponent();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        displayMainComponent.setDoubleBuffered(true);

        tickerComponent.setDoubleBuffered(true);
        tickerComponent.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N

        javax.swing.GroupLayout tickerComponentLayout = new javax.swing.GroupLayout(tickerComponent);
        tickerComponent.setLayout(tickerComponentLayout);
        tickerComponentLayout.setHorizontalGroup(
            tickerComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 848, Short.MAX_VALUE)
        );
        tickerComponentLayout.setVerticalGroup(
            tickerComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 61, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout displayMainComponentLayout = new javax.swing.GroupLayout(displayMainComponent);
        displayMainComponent.setLayout(displayMainComponentLayout);
        displayMainComponentLayout.setHorizontalGroup(
            displayMainComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tickerComponent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        displayMainComponentLayout.setVerticalGroup(
            displayMainComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayMainComponentLayout.createSequentialGroup()
                .addContainerGap(416, Short.MAX_VALUE)
                .addComponent(tickerComponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(displayMainComponent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(displayMainComponent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DisplayMainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.netprojectev.GUI.Display.DisplayMainComponent displayMainComponent;
    private de.netprojectev.GUI.Display.TickerComponent tickerComponent;
    // End of variables declaration//GEN-END:variables
    
	public de.netprojectev.GUI.Display.TickerComponent getTickerComponent() {
		return tickerComponent;
	}

	public void setTickerComponent(
			de.netprojectev.GUI.Display.TickerComponent tickerComponent) {
		this.tickerComponent = tickerComponent;
	}

	public de.netprojectev.GUI.Display.DisplayMainComponent getDisplayMainComponent() {
		return displayMainComponent;
	}

	public void setDisplayMainComponent(
			de.netprojectev.GUI.Display.DisplayMainComponent displayMainComponent) {
		this.displayMainComponent = displayMainComponent;
	}

	public Timer getLiveTickerTimer() {
		return liveTickerTimer;
	}

	public void setLiveTickerTimer(Timer liveTickerTimer) {
		this.liveTickerTimer = liveTickerTimer;
	}
}
